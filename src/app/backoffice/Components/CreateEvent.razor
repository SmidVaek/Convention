@using Conventions.Services.TypedClients
@inject ConventionClient _conferenceClient;
@inject VenueClient _venueClient;
@inject UserClient _userClient;

<EditForm OnSubmit="@OnFormSubmitAsync" Model="_item">
    <ModalHeader>
        <ModalTitle>New Event</ModalTitle>
        <CloseButton />
    </ModalHeader>
    <ModalBody>
        <Div>
            <Row>
                <Column ColumnSize="ColumnSize.Is12"> 
                    <Label For="name">Name</Label>
                    <InputText id="name" @bind-Value="_item.Name"></InputText>
                </Column>
                <Column ColumnSize="ColumnSize.Is12">
                    <Label For="name">Description</Label>
                    <InputTextArea id="name" @bind-Value="_item.Description"></InputTextArea>
                </Column>
                <Column ColumnSize="ColumnSize.Is12">
                    <Label For="name">Event Start</Label>
                    <DateEdit TValue="DateTimeOffset" InputMode="DateInputMode.DateTime" Date="@_eventStart" DateChanged="@OnStartDateChanged" />
                </Column>
                <Column ColumnSize="ColumnSize.Is12">
                    <Label For="name">Event Stop</Label>
                    <DateEdit TValue="DateTimeOffset" InputMode="DateInputMode.DateTime" Date="@_eventEnd" DateChanged="@OnEndDateChanged" />
                </Column>
            </Row>
        </Div>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" Type="ButtonType.Submit">Submit</Button>
    </ModalFooter>
</EditForm>           

@code {
    private Conventions.Models.Event _item = new();

    private DateTimeOffset _eventStart = DateTimeOffset.UtcNow;
    private DateTimeOffset _eventEnd = DateTimeOffset.UtcNow.AddHours(1);

    [Parameter]
    public EventCallback Finished { get; set; }

    [Parameter]
    public EventClient Client { get; set; } = null!;

    private async Task OnFormSubmitAsync()
    {
        _item.Start = _eventStart;
        _item.End = _eventEnd;

        var newConvention = await Client.PostEventAsync(_item);
        await Finished.InvokeAsync();
    }

    void OnStartDateChanged( DateTimeOffset date )
    {
        _eventStart = date;
    }

    void OnEndDateChanged( DateTimeOffset date )
    {
        _eventEnd = date;
    }
}
