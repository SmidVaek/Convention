@using Conventions.Services.TypedClients

<EditForm OnSubmit="@OnFormSubmitAsync" Model="@_item">
    <ModalHeader>
        <ModalTitle>New Venue</ModalTitle>
        <CloseButton />
    </ModalHeader>
    <ModalBody>
        <Div>
            <Row>
                <Column>
                    <Label For="name">Name</Label>
                    <InputText id="name" @bind-Value="_item.Name"></InputText>
                </Column>
                <Column>
                    <Label For="address">Address</Label>
                    <InputText id="address" @bind-Value="_item.Address"></InputText>
                </Column>
            </Row>
        </Div>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" Type="ButtonType.Submit">Submit</Button>
    </ModalFooter>
</EditForm>           

@code {
    private Conventions.Models.Venue _item = new();

    [Parameter]
    public EventCallback Finished { get; set; }

    [Parameter]
    public VenueClient Client { get; set; } = null!;

    private async Task OnFormSubmitAsync()
    {
        var newConvention = await Client.PostVenueAsync(_item);
        await Finished.InvokeAsync();
    }
}
