
@page "/events"

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication
@using Conventions.Services.TypedClients
@inject EventClient _client;

<AuthorizeView Policy=@Policies.IsAdmin>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
    <Authorized>
        <PageTitle>Events</PageTitle>
            <h3>Events</h3>
            
            <Button Color=Color.Primary @onclick="Reload">Refresh</Button>
        @if(_items == null)
        {
            <p>LOADING ...</p>
        }
        else {
            @if(_items.Count() > 0)
            {
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Id</TableHeaderCell>
                            <TableHeaderCell>Name</TableHeaderCell>
                            <TableHeaderCell>Start</TableHeaderCell>
                            <TableHeaderCell>End</TableHeaderCell>
                            <TableHeaderCell></TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (var item in _items)
                        {
                            <TableRow>
                                <TableRowCell>@item.Id</TableRowCell>
                                <TableRowCell>@item.Name</TableRowCell>
                                <TableRowCell>@item.Start.ToString("o")</TableRowCell>
                                <TableRowCell>@item.End.ToString("o")</TableRowCell>
                                <TableRowCell><Button Color=Color.Secondary @onclick="() => Delete(item)">Edit</Button><Button Color=Color.Danger @onclick="() => Delete(item)">Remove</Button></TableRowCell>
                            </TableRow>
                        }
                    </TableBody>
            
                </Table>
            }
            else
            {
                <p>No conventions found.</p>
            }
        }

        <Button Color="Color.Primary" Clicked="@ShowModal">Create</Button>

        <Modal @ref="modalRef">
            <ModalContent Centered>
                <CreateEvent Finished="@HideModal" Client="@_client" />
            </ModalContent>
        </Modal>
    </Authorized>
</AuthorizeView>



@code {
    private IEnumerable<Conventions.Models.Event>? _items = null;
    private Modal modalRef;

    protected override async Task OnInitializedAsync()
    {
        await Reload();
    }

    private async Task Reload()
    {
        _items = null;
        _items = await _client.GetEventsAsync();   
    }

    private async Task Delete(Conventions.Models.Event item)
    {
        await _client.DeleteEventAsync(item);
        await Reload();
    }

        private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }
}
